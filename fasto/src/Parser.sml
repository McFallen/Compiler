local
type t__1__ = (int*int)
type t__2__ = (int*int)
type t__3__ = (int*int)
type t__4__ = bool*(int*int)
type t__5__ = (int*int)
type t__6__ = char*(int*int)
type t__7__ = (int*int)
type t__8__ = (int*int)
type t__9__ = (int*int)
type t__10__ = (int*int)
type t__11__ = (int*int)
type t__12__ = (int*int)
type t__13__ = (int*int)
type t__14__ = (int*int)
type t__15__ = (int*int)
type t__16__ = string*(int*int)
type t__17__ = (int*int)
type t__18__ = (int*int)
type t__19__ = (int*int)
type t__20__ = (int*int)
type t__21__ = (int*int)
type t__22__ = (int*int)
type t__23__ = (int*int)
type t__24__ = (int*int)
type t__25__ = (int*int)
type t__26__ = (int*int)
type t__27__ = (int*int)
type t__28__ = (int*int)
type t__29__ = (int*int)
type t__30__ = int*(int*int)
type t__31__ = (int*int)
type t__32__ = (int*int)
type t__33__ = (int*int)
type t__34__ = (int*int)
type t__35__ = (int*int)
type t__36__ = (int*int)
type t__37__ = (int*int)
type t__38__ = (int*int)
type t__39__ = (int*int)
type t__40__ = (int*int)
type t__41__ = string*(int*int)
type t__42__ = (int*int)
type t__43__ = (int*int)
type t__44__ = (int*int)
in
datatype token =
    AND of t__1__
  | ARROW of t__2__
  | BOOL of t__3__
  | BOOLEAN of t__4__
  | CHAR of t__5__
  | CHARLIT of t__6__
  | COMMA of t__7__
  | DEQ of t__8__
  | DIV of t__9__
  | ELSE of t__10__
  | EOF of t__11__
  | EQ of t__12__
  | FILTER of t__13__
  | FN of t__14__
  | FUN of t__15__
  | ID of t__16__
  | IF of t__17__
  | IN of t__18__
  | INT of t__19__
  | IOTA of t__20__
  | LBRACKET of t__21__
  | LCURLY of t__22__
  | LET of t__23__
  | LPAR of t__24__
  | LTH of t__25__
  | MAP of t__26__
  | MINUS of t__27__
  | NEG of t__28__
  | NOT of t__29__
  | NUM of t__30__
  | OP of t__31__
  | OR of t__32__
  | PLUS of t__33__
  | RBRACKET of t__34__
  | RCURLY of t__35__
  | READ of t__36__
  | REDUCE of t__37__
  | REPLICATE of t__38__
  | RPAR of t__39__
  | SCAN of t__40__
  | STRINGLIT of t__41__
  | THEN of t__42__
  | TIMES of t__43__
  | WRITE of t__44__
end;

open Obj Parsing;
prim_val vector_ : int -> 'a -> 'a Vector.vector = 2 "make_vect";
prim_val update_ : 'a Vector.vector -> int -> 'a -> unit = 3 "set_vect_item";



(* A parser definition for Fasto, for use with mosmlyac. *)

open Fasto
open Fasto.UnknownTypes

(* Line 13, file Parser.sml *)
val yytransl = #[
  257 (* AND *),
  258 (* ARROW *),
  259 (* BOOL *),
  260 (* BOOLEAN *),
  261 (* CHAR *),
  262 (* CHARLIT *),
  263 (* COMMA *),
  264 (* DEQ *),
  265 (* DIV *),
  266 (* ELSE *),
  267 (* EOF *),
  268 (* EQ *),
  269 (* FILTER *),
  270 (* FN *),
  271 (* FUN *),
  272 (* ID *),
  273 (* IF *),
  274 (* IN *),
  275 (* INT *),
  276 (* IOTA *),
  277 (* LBRACKET *),
  278 (* LCURLY *),
  279 (* LET *),
  280 (* LPAR *),
  281 (* LTH *),
  282 (* MAP *),
  283 (* MINUS *),
  284 (* NEG *),
  285 (* NOT *),
  286 (* NUM *),
  287 (* OP *),
  288 (* OR *),
  289 (* PLUS *),
  290 (* RBRACKET *),
  291 (* RCURLY *),
  292 (* READ *),
  293 (* REDUCE *),
  294 (* REPLICATE *),
  295 (* RPAR *),
  296 (* SCAN *),
  297 (* STRINGLIT *),
  298 (* THEN *),
  299 (* TIMES *),
  300 (* WRITE *),
    0];

val yylhs = "\255\255\
\\001\000\002\000\002\000\003\000\003\000\004\000\004\000\004\000\
\\004\000\005\000\005\000\009\000\006\000\006\000\006\000\006\000\
\\006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\\006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\\006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\\006\000\006\000\006\000\007\000\007\000\008\000\008\000\008\000\
\\000\000";

val yylen = "\002\000\
\\002\000\003\000\002\000\007\000\006\000\001\000\001\000\001\000\
\\003\000\004\000\002\000\001\000\001\000\001\000\001\000\001\000\
\\001\000\003\000\003\000\003\000\003\000\003\000\002\000\003\000\
\\003\000\003\000\003\000\006\000\004\000\003\000\004\000\004\000\
\\004\000\006\000\008\000\006\000\009\000\008\000\006\000\003\000\
\\006\000\004\000\002\000\003\000\001\000\001\000\007\000\006\000\
\\002\000";

val yydefred = "\000\000\
\\000\000\000\000\000\000\049\000\000\000\007\000\008\000\006\000\
\\000\000\000\000\000\000\001\000\000\000\002\000\000\000\009\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015\000\
\\014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\013\000\000\000\000\000\000\000\000\000\
\\017\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\010\000\000\000\
\\000\000\046\000\000\000\000\000\030\000\000\000\000\000\000\000\
\\000\000\018\000\000\000\040\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\042\000\029\000\000\000\
\\033\000\044\000\000\000\000\000\031\000\012\000\000\000\000\000\
\\000\000\000\000\032\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\039\000\000\000\
\\000\000\036\000\000\000\000\000\034\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\035\000\038\000\
\\000\000\037\000";

val yydgoto = "\002\000\
\\004\000\005\000\010\000\019\000\020\000\051\000\052\000\075\000\
\\111\000";

val yysindex = "\017\000\
\\004\255\000\000\058\255\000\000\014\255\000\000\000\000\000\000\
\\058\255\004\255\016\255\000\000\021\255\000\000\029\255\000\000\
\\001\255\026\255\059\255\035\255\051\001\069\255\071\255\000\000\
\\000\000\061\255\044\255\051\001\062\255\051\001\072\255\051\001\
\\065\255\051\001\051\001\000\000\066\255\070\255\075\255\082\255\
\\000\000\083\255\202\000\058\255\051\001\252\254\051\001\022\001\
\\027\255\051\001\194\255\073\255\084\255\203\255\252\254\000\000\
\\202\000\058\255\050\255\051\001\252\254\051\001\051\001\051\001\
\\051\001\051\001\051\001\051\001\051\001\051\001\000\000\202\000\
\\058\255\000\000\103\255\224\255\000\000\076\255\051\001\239\255\
\\051\001\000\000\051\001\000\000\110\255\079\255\089\255\116\255\
\\252\255\117\255\005\000\250\254\136\000\000\000\136\000\007\255\
\\254\255\007\255\000\000\101\255\051\001\000\000\000\000\026\000\
\\000\000\000\000\046\000\051\001\000\000\000\000\123\255\051\001\
\\051\001\051\001\000\000\012\255\059\000\051\001\051\001\074\000\
\\051\001\087\000\096\000\117\000\129\255\095\255\000\000\202\000\
\\202\000\000\000\139\000\051\001\000\000\051\001\051\001\133\255\
\\051\001\153\000\166\000\202\000\051\001\175\000\000\000\000\000\
\\202\000\000\000";

val yyrindex = "\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\132\255\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\105\255\000\000\000\000\
\\000\000\000\000\094\255\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\019\255\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\226\254\000\000\000\000\000\000\000\000\131\255\
\\117\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\056\255\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\254\000\105\001\144\255\111\001\205\000\
\\075\001\241\000\181\255\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\147\001\
\\153\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\140\255\000\000\000\000\000\000\000\000\
\\141\255\000\000";

val yygindex = "\000\000\
\\000\000\140\000\000\000\255\255\213\255\235\255\231\255\023\000\
\\000\000";

val YYTABLESIZE = 707;
val yytable = "\043\000\
\\071\000\011\000\065\000\006\000\045\000\007\000\049\000\013\000\
\\045\000\073\000\054\000\074\000\056\000\057\000\006\000\065\000\
\\007\000\001\000\003\000\008\000\067\000\009\000\078\000\072\000\
\\012\000\076\000\069\000\063\000\080\000\005\000\008\000\015\000\
\\009\000\005\000\064\000\065\000\070\000\021\000\089\000\018\000\
\\091\000\092\000\093\000\094\000\095\000\096\000\097\000\098\000\
\\099\000\070\000\125\000\066\000\017\000\067\000\016\000\106\000\
\\086\000\104\000\068\000\069\000\006\000\107\000\007\000\073\000\
\\047\000\074\000\004\000\048\000\079\000\070\000\004\000\100\000\
\\126\000\023\000\022\000\044\000\008\000\085\000\009\000\117\000\
\\087\000\088\000\045\000\090\000\046\000\050\000\120\000\053\000\
\\055\000\058\000\122\000\123\000\124\000\059\000\016\000\083\000\
\\128\000\129\000\060\000\131\000\016\000\016\000\016\000\016\000\
\\016\000\061\000\062\000\082\000\016\000\101\000\138\000\016\000\
\\139\000\140\000\103\000\142\000\108\000\109\000\016\000\145\000\
\\016\000\110\000\112\000\114\000\116\000\016\000\016\000\016\000\
\\016\000\121\000\135\000\023\000\016\000\136\000\141\000\016\000\
\\016\000\023\000\023\000\023\000\023\000\023\000\003\000\011\000\
\\022\000\023\000\048\000\047\000\023\000\014\000\022\000\022\000\
\\022\000\022\000\022\000\023\000\000\000\023\000\022\000\000\000\
\\000\000\022\000\023\000\023\000\023\000\023\000\000\000\000\000\
\\022\000\023\000\022\000\000\000\023\000\023\000\000\000\022\000\
\\022\000\022\000\022\000\000\000\000\000\021\000\022\000\000\000\
\\000\000\022\000\022\000\021\000\021\000\021\000\021\000\021\000\
\\000\000\000\000\063\000\021\000\000\000\000\000\021\000\000\000\
\\081\000\064\000\065\000\063\000\000\000\021\000\000\000\021\000\
\\000\000\000\000\064\000\065\000\021\000\021\000\021\000\021\000\
\\000\000\000\000\066\000\021\000\067\000\000\000\021\000\021\000\
\\063\000\068\000\069\000\066\000\000\000\067\000\000\000\064\000\
\\065\000\000\000\068\000\069\000\070\000\000\000\000\000\063\000\
\\000\000\084\000\000\000\000\000\000\000\070\000\064\000\065\000\
\\066\000\000\000\067\000\000\000\063\000\000\000\063\000\068\000\
\\069\000\102\000\113\000\064\000\065\000\063\000\065\000\066\000\
\\000\000\067\000\070\000\000\000\064\000\065\000\068\000\069\000\
\\000\000\000\000\000\000\000\000\066\000\105\000\067\000\000\000\
\\067\000\070\000\063\000\068\000\069\000\066\000\069\000\067\000\
\\000\000\064\000\065\000\118\000\068\000\069\000\070\000\000\000\
\\070\000\000\000\000\000\115\000\000\000\000\000\063\000\070\000\
\\000\000\000\000\066\000\000\000\067\000\064\000\065\000\000\000\
\\000\000\068\000\069\000\063\000\000\000\000\000\000\000\119\000\
\\000\000\000\000\064\000\065\000\070\000\000\000\066\000\000\000\
\\067\000\000\000\063\000\000\000\000\000\068\000\069\000\000\000\
\\000\000\064\000\065\000\066\000\000\000\067\000\000\000\063\000\
\\070\000\000\000\068\000\069\000\000\000\132\000\064\000\065\000\
\\063\000\127\000\066\000\000\000\067\000\070\000\000\000\064\000\
\\065\000\068\000\069\000\000\000\000\000\000\000\000\000\066\000\
\\130\000\067\000\000\000\000\000\070\000\063\000\068\000\069\000\
\\066\000\000\000\067\000\134\000\064\000\065\000\000\000\068\000\
\\069\000\070\000\000\000\000\000\000\000\000\000\133\000\000\000\
\\063\000\000\000\070\000\063\000\000\000\066\000\000\000\067\000\
\\065\000\137\000\064\000\065\000\068\000\069\000\000\000\000\000\
\\000\000\063\000\000\000\000\000\000\000\000\000\000\000\070\000\
\\064\000\065\000\067\000\066\000\000\000\067\000\063\000\068\000\
\\069\000\000\000\068\000\069\000\000\000\064\000\065\000\063\000\
\\000\000\066\000\070\000\067\000\000\000\070\000\064\000\065\000\
\\068\000\069\000\000\000\000\000\000\000\000\000\066\000\143\000\
\\067\000\000\000\000\000\070\000\000\000\068\000\069\000\066\000\
\\000\000\067\000\063\000\000\000\144\000\020\000\068\000\069\000\
\\070\000\064\000\065\000\020\000\020\000\146\000\020\000\020\000\
\\000\000\070\000\000\000\020\000\000\000\000\000\020\000\000\000\
\\000\000\000\000\066\000\000\000\067\000\020\000\000\000\020\000\
\\000\000\068\000\069\000\000\000\020\000\020\000\020\000\020\000\
\\000\000\019\000\000\000\020\000\070\000\000\000\020\000\019\000\
\\019\000\000\000\019\000\019\000\000\000\000\000\024\000\019\000\
\\000\000\000\000\019\000\000\000\024\000\024\000\000\000\024\000\
\\024\000\019\000\000\000\019\000\024\000\000\000\000\000\024\000\
\\019\000\019\000\019\000\019\000\000\000\000\000\024\000\019\000\
\\000\000\024\000\019\000\025\000\000\000\024\000\000\000\024\000\
\\024\000\000\000\026\000\000\000\024\000\027\000\028\000\024\000\
\\000\000\029\000\000\000\030\000\031\000\032\000\000\000\033\000\
\\000\000\034\000\035\000\036\000\000\000\000\000\024\000\000\000\
\\025\000\037\000\038\000\039\000\077\000\040\000\041\000\026\000\
\\000\000\042\000\027\000\028\000\000\000\000\000\029\000\000\000\
\\030\000\031\000\032\000\000\000\033\000\000\000\034\000\035\000\
\\036\000\025\000\025\000\000\000\025\000\025\000\037\000\038\000\
\\039\000\025\000\040\000\041\000\025\000\000\000\042\000\000\000\
\\000\000\000\000\000\000\025\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\025\000\000\000\025\000\025\000\000\000\026\000\
\\026\000\025\000\026\000\026\000\025\000\027\000\027\000\026\000\
\\027\000\027\000\026\000\043\000\000\000\027\000\043\000\043\000\
\\027\000\026\000\000\000\043\000\000\000\000\000\043\000\027\000\
\\000\000\000\000\026\000\026\000\000\000\000\000\000\000\026\000\
\\027\000\027\000\026\000\000\000\000\000\027\000\043\000\043\000\
\\027\000\028\000\000\000\043\000\028\000\028\000\043\000\041\000\
\\000\000\028\000\041\000\041\000\028\000\000\000\000\000\041\000\
\\000\000\000\000\041\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\028\000\028\000\000\000\000\000\
\\000\000\028\000\041\000\041\000\028\000\000\000\000\000\041\000\
\\000\000\000\000\041\000";

val yycheck = "\021\000\
\\044\000\003\000\009\001\003\001\035\001\005\001\028\000\009\000\
\\039\001\014\001\032\000\016\001\034\000\035\000\003\001\009\001\
\\005\001\001\000\015\001\019\001\027\001\021\001\048\000\045\000\
\\011\001\047\000\033\001\001\001\050\000\011\001\019\001\016\001\
\\021\001\015\001\008\001\009\001\043\001\012\001\060\000\039\001\
\\062\000\063\000\064\000\065\000\066\000\067\000\068\000\069\000\
\\070\000\043\001\039\001\025\001\024\001\027\001\034\001\081\000\
\\058\000\079\000\032\001\033\001\003\001\083\000\005\001\014\001\
\\021\001\016\001\011\001\024\001\042\001\043\001\015\001\073\000\
\\116\000\039\001\016\001\007\001\019\001\055\000\021\001\101\000\
\\031\001\059\000\012\001\061\000\024\001\024\001\108\000\016\001\
\\024\001\024\001\112\000\113\000\114\000\024\001\001\001\012\001\
\\118\000\119\000\024\001\121\000\007\001\008\001\009\001\010\001\
\\011\001\024\001\024\001\035\001\015\001\007\001\132\000\018\001\
\\134\000\135\000\039\001\137\000\007\001\039\001\025\001\141\000\
\\027\001\033\001\007\001\007\001\024\001\032\001\033\001\034\001\
\\035\001\007\001\002\001\001\001\039\001\039\001\002\001\042\001\
\\043\001\007\001\008\001\009\001\010\001\011\001\011\001\039\001\
\\001\001\015\001\007\001\007\001\018\001\010\000\007\001\008\001\
\\009\001\010\001\011\001\025\001\255\255\027\001\015\001\255\255\
\\255\255\018\001\032\001\033\001\034\001\035\001\255\255\255\255\
\\025\001\039\001\027\001\255\255\042\001\043\001\255\255\032\001\
\\033\001\034\001\035\001\255\255\255\255\001\001\039\001\255\255\
\\255\255\042\001\043\001\007\001\008\001\009\001\010\001\011\001\
\\255\255\255\255\001\001\015\001\255\255\255\255\018\001\255\255\
\\007\001\008\001\009\001\001\001\255\255\025\001\255\255\027\001\
\\255\255\255\255\008\001\009\001\032\001\033\001\034\001\035\001\
\\255\255\255\255\025\001\039\001\027\001\255\255\042\001\043\001\
\\001\001\032\001\033\001\025\001\255\255\027\001\255\255\008\001\
\\009\001\255\255\032\001\033\001\043\001\255\255\255\255\001\001\
\\255\255\039\001\255\255\255\255\255\255\043\001\008\001\009\001\
\\025\001\255\255\027\001\255\255\001\001\255\255\001\001\032\001\
\\033\001\034\001\007\001\008\001\009\001\001\001\009\001\025\001\
\\255\255\027\001\043\001\255\255\008\001\009\001\032\001\033\001\
\\255\255\255\255\255\255\255\255\025\001\039\001\027\001\255\255\
\\027\001\043\001\001\001\032\001\033\001\025\001\033\001\027\001\
\\255\255\008\001\009\001\010\001\032\001\033\001\043\001\255\255\
\\043\001\255\255\255\255\039\001\255\255\255\255\001\001\043\001\
\\255\255\255\255\025\001\255\255\027\001\008\001\009\001\255\255\
\\255\255\032\001\033\001\001\001\255\255\255\255\255\255\018\001\
\\255\255\255\255\008\001\009\001\043\001\255\255\025\001\255\255\
\\027\001\255\255\001\001\255\255\255\255\032\001\033\001\255\255\
\\255\255\008\001\009\001\025\001\255\255\027\001\255\255\001\001\
\\043\001\255\255\032\001\033\001\255\255\007\001\008\001\009\001\
\\001\001\039\001\025\001\255\255\027\001\043\001\255\255\008\001\
\\009\001\032\001\033\001\255\255\255\255\255\255\255\255\025\001\
\\039\001\027\001\255\255\255\255\043\001\001\001\032\001\033\001\
\\025\001\255\255\027\001\007\001\008\001\009\001\255\255\032\001\
\\033\001\043\001\255\255\255\255\255\255\255\255\039\001\255\255\
\\001\001\255\255\043\001\001\001\255\255\025\001\255\255\027\001\
\\009\001\007\001\008\001\009\001\032\001\033\001\255\255\255\255\
\\255\255\001\001\255\255\255\255\255\255\255\255\255\255\043\001\
\\008\001\009\001\027\001\025\001\255\255\027\001\001\001\032\001\
\\033\001\255\255\032\001\033\001\255\255\008\001\009\001\001\001\
\\255\255\025\001\043\001\027\001\255\255\043\001\008\001\009\001\
\\032\001\033\001\255\255\255\255\255\255\255\255\025\001\039\001\
\\027\001\255\255\255\255\043\001\255\255\032\001\033\001\025\001\
\\255\255\027\001\001\001\255\255\039\001\001\001\032\001\033\001\
\\043\001\008\001\009\001\007\001\008\001\039\001\010\001\011\001\
\\255\255\043\001\255\255\015\001\255\255\255\255\018\001\255\255\
\\255\255\255\255\025\001\255\255\027\001\025\001\255\255\027\001\
\\255\255\032\001\033\001\255\255\032\001\033\001\034\001\035\001\
\\255\255\001\001\255\255\039\001\043\001\255\255\042\001\007\001\
\\008\001\255\255\010\001\011\001\255\255\255\255\001\001\015\001\
\\255\255\255\255\018\001\255\255\007\001\008\001\255\255\010\001\
\\011\001\025\001\255\255\027\001\015\001\255\255\255\255\018\001\
\\032\001\033\001\034\001\035\001\255\255\255\255\025\001\039\001\
\\255\255\004\001\042\001\006\001\255\255\032\001\255\255\034\001\
\\035\001\255\255\013\001\255\255\039\001\016\001\017\001\042\001\
\\255\255\020\001\255\255\022\001\023\001\024\001\255\255\026\001\
\\255\255\028\001\029\001\030\001\255\255\255\255\004\001\255\255\
\\006\001\036\001\037\001\038\001\039\001\040\001\041\001\013\001\
\\255\255\044\001\016\001\017\001\255\255\255\255\020\001\255\255\
\\022\001\023\001\024\001\255\255\026\001\255\255\028\001\029\001\
\\030\001\007\001\008\001\255\255\010\001\011\001\036\001\037\001\
\\038\001\015\001\040\001\041\001\018\001\255\255\044\001\255\255\
\\255\255\255\255\255\255\025\001\255\255\255\255\255\255\255\255\
\\255\255\255\255\032\001\255\255\034\001\035\001\255\255\007\001\
\\008\001\039\001\010\001\011\001\042\001\007\001\008\001\015\001\
\\010\001\011\001\018\001\007\001\255\255\015\001\010\001\011\001\
\\018\001\025\001\255\255\015\001\255\255\255\255\018\001\025\001\
\\255\255\255\255\034\001\035\001\255\255\255\255\255\255\039\001\
\\034\001\035\001\042\001\255\255\255\255\039\001\034\001\035\001\
\\042\001\007\001\255\255\039\001\010\001\011\001\042\001\007\001\
\\255\255\015\001\010\001\011\001\018\001\255\255\255\255\015\001\
\\255\255\255\255\018\001\255\255\255\255\255\255\255\255\255\255\
\\255\255\255\255\255\255\255\255\034\001\035\001\255\255\255\255\
\\255\255\039\001\034\001\035\001\042\001\255\255\255\255\039\001\
\\255\255\255\255\042\001";

val yyact = vector_ 50 (fn () => ((raise Fail "parser") : obj));
(* Rule 1, file Parser.grm, line 43 *)
val _ = update_ yyact 1
(fn () => repr(let
val d__1__ = peekVal 1 : Fasto.UnknownTypes.FunDec list
val d__2__ = peekVal 0 : (int*int)
in
( (d__1__) ) end : Fasto.UnknownTypes.Prog))
;
(* Rule 2, file Parser.grm, line 46 *)
val _ = update_ yyact 2
(fn () => repr(let
val d__1__ = peekVal 2 : (int*int)
val d__2__ = peekVal 1 : Fasto.UnknownTypes.FunDec
val d__3__ = peekVal 0 : Fasto.UnknownTypes.FunDec list
in
( (d__2__) :: (d__3__) ) end : Fasto.UnknownTypes.FunDec list))
;
(* Rule 3, file Parser.grm, line 47 *)
val _ = update_ yyact 3
(fn () => repr(let
val d__1__ = peekVal 1 : (int*int)
val d__2__ = peekVal 0 : Fasto.UnknownTypes.FunDec
in
( (d__2__) :: [] ) end : Fasto.UnknownTypes.FunDec list))
;
(* Rule 4, file Parser.grm, line 51 *)
val _ = update_ yyact 4
(fn () => repr(let
val d__1__ = peekVal 6 : Fasto.Type
val d__2__ = peekVal 5 : string*(int*int)
val d__3__ = peekVal 4 : (int*int)
val d__4__ = peekVal 3 : Fasto.Param list
val d__5__ = peekVal 2 : (int*int)
val d__6__ = peekVal 1 : (int*int)
val d__7__ = peekVal 0 : Fasto.UnknownTypes.Exp
in
( FunDec (#1 (d__2__), (d__1__), (d__4__), (d__7__), #2 (d__2__)) ) end : Fasto.UnknownTypes.FunDec))
;
(* Rule 5, file Parser.grm, line 53 *)
val _ = update_ yyact 5
(fn () => repr(let
val d__1__ = peekVal 5 : Fasto.Type
val d__2__ = peekVal 4 : string*(int*int)
val d__3__ = peekVal 3 : (int*int)
val d__4__ = peekVal 2 : (int*int)
val d__5__ = peekVal 1 : (int*int)
val d__6__ = peekVal 0 : Fasto.UnknownTypes.Exp
in
( FunDec (#1 (d__2__), (d__1__), [], (d__6__), #2 (d__2__)) ) end : Fasto.UnknownTypes.FunDec))
;
(* Rule 6, file Parser.grm, line 56 *)
val _ = update_ yyact 6
(fn () => repr(let
val d__1__ = peekVal 0 : (int*int)
in
( Int ) end : Fasto.Type))
;
(* Rule 7, file Parser.grm, line 57 *)
val _ = update_ yyact 7
(fn () => repr(let
val d__1__ = peekVal 0 : (int*int)
in
( Bool ) end : Fasto.Type))
;
(* Rule 8, file Parser.grm, line 58 *)
val _ = update_ yyact 8
(fn () => repr(let
val d__1__ = peekVal 0 : (int*int)
in
( Char ) end : Fasto.Type))
;
(* Rule 9, file Parser.grm, line 59 *)
val _ = update_ yyact 9
(fn () => repr(let
val d__1__ = peekVal 2 : (int*int)
val d__2__ = peekVal 1 : Fasto.Type
val d__3__ = peekVal 0 : (int*int)
in
( Array (d__2__) ) end : Fasto.Type))
;
(* Rule 10, file Parser.grm, line 62 *)
val _ = update_ yyact 10
(fn () => repr(let
val d__1__ = peekVal 3 : Fasto.Type
val d__2__ = peekVal 2 : string*(int*int)
val d__3__ = peekVal 1 : (int*int)
val d__4__ = peekVal 0 : Fasto.Param list
in
( Param (#1 (d__2__), (d__1__)) :: (d__4__) ) end : Fasto.Param list))
;
(* Rule 11, file Parser.grm, line 63 *)
val _ = update_ yyact 11
(fn () => repr(let
val d__1__ = peekVal 1 : Fasto.Type
val d__2__ = peekVal 0 : string*(int*int)
in
( Param (#1 (d__2__), (d__1__)) :: [] ) end : Fasto.Param list))
;
(* Rule 12, file Parser.grm, line 66 *)
val _ = update_ yyact 12
(fn () => repr(let
val d__1__ = peekVal 0 : (int*int)
in
( (Lambda
                           (Int, [Param ("x", Int),
                                        Param ("y", Int)],
                            Plus (Var ("x", (d__1__)),
                                        Var ("y", (d__1__)),
                                        (d__1__)) ,(d__1__)))
                        ) end : Fasto.UnknownTypes.FunArg))
;
(* Rule 13, file Parser.grm, line 75 *)
val _ = update_ yyact 13
(fn () => repr(let
val d__1__ = peekVal 0 : int*(int*int)
in
( Constant ( IntVal (#1 (d__1__)), #2 (d__1__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 14, file Parser.grm, line 76 *)
val _ = update_ yyact 14
(fn () => repr(let
val d__1__ = peekVal 0 : char*(int*int)
in
( Constant ( CharVal (#1 (d__1__)), #2 (d__1__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 15, file Parser.grm, line 77 *)
val _ = update_ yyact 15
(fn () => repr(let
val d__1__ = peekVal 0 : bool*(int*int)
in
( Constant ( BoolVal (#1 (d__1__)), #2 (d__1__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 16, file Parser.grm, line 78 *)
val _ = update_ yyact 16
(fn () => repr(let
val d__1__ = peekVal 0 : string*(int*int)
in
( Var (d__1__) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 17, file Parser.grm, line 79 *)
val _ = update_ yyact 17
(fn () => repr(let
val d__1__ = peekVal 0 : string*(int*int)
in
( StringLit (d__1__) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 18, file Parser.grm, line 81 *)
val _ = update_ yyact 18
(fn () => repr(let
val d__1__ = peekVal 2 : (int*int)
val d__2__ = peekVal 1 : Fasto.UnknownTypes.Exp list
val d__3__ = peekVal 0 : (int*int)
in
( ArrayLit ((d__2__), (), (d__1__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 19, file Parser.grm, line 82 *)
val _ = update_ yyact 19
(fn () => repr(let
val d__1__ = peekVal 2 : Fasto.UnknownTypes.Exp
val d__2__ = peekVal 1 : (int*int)
val d__3__ = peekVal 0 : Fasto.UnknownTypes.Exp
in
( Plus ((d__1__), (d__3__), (d__2__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 20, file Parser.grm, line 83 *)
val _ = update_ yyact 20
(fn () => repr(let
val d__1__ = peekVal 2 : Fasto.UnknownTypes.Exp
val d__2__ = peekVal 1 : (int*int)
val d__3__ = peekVal 0 : Fasto.UnknownTypes.Exp
in
( Minus((d__1__), (d__3__), (d__2__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 21, file Parser.grm, line 85 *)
val _ = update_ yyact 21
(fn () => repr(let
val d__1__ = peekVal 2 : Fasto.UnknownTypes.Exp
val d__2__ = peekVal 1 : (int*int)
val d__3__ = peekVal 0 : Fasto.UnknownTypes.Exp
in
( Times((d__1__), (d__3__), (d__2__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 22, file Parser.grm, line 87 *)
val _ = update_ yyact 22
(fn () => repr(let
val d__1__ = peekVal 2 : Fasto.UnknownTypes.Exp
val d__2__ = peekVal 1 : (int*int)
val d__3__ = peekVal 0 : Fasto.UnknownTypes.Exp
in
( Divide((d__1__), (d__3__), (d__2__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 23, file Parser.grm, line 89 *)
val _ = update_ yyact 23
(fn () => repr(let
val d__1__ = peekVal 1 : (int*int)
val d__2__ = peekVal 0 : Fasto.UnknownTypes.Exp
in
( Negate((d__2__), (d__1__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 24, file Parser.grm, line 90 *)
val _ = update_ yyact 24
(fn () => repr(let
val d__1__ = peekVal 2 : Fasto.UnknownTypes.Exp
val d__2__ = peekVal 1 : (int*int)
val d__3__ = peekVal 0 : Fasto.UnknownTypes.Exp
in
( And((d__1__), (d__3__), (d__2__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 25, file Parser.grm, line 92 *)
val _ = update_ yyact 25
(fn () => repr(let
val d__1__ = peekVal 2 : Fasto.UnknownTypes.Exp
val d__2__ = peekVal 1 : (int*int)
val d__3__ = peekVal 0 : Fasto.UnknownTypes.Exp
in
( Or((d__1__), (d__3__), (d__2__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 26, file Parser.grm, line 94 *)
val _ = update_ yyact 26
(fn () => repr(let
val d__1__ = peekVal 2 : Fasto.UnknownTypes.Exp
val d__2__ = peekVal 1 : (int*int)
val d__3__ = peekVal 0 : Fasto.UnknownTypes.Exp
in
( Equal((d__1__), (d__3__), (d__2__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 27, file Parser.grm, line 95 *)
val _ = update_ yyact 27
(fn () => repr(let
val d__1__ = peekVal 2 : Fasto.UnknownTypes.Exp
val d__2__ = peekVal 1 : (int*int)
val d__3__ = peekVal 0 : Fasto.UnknownTypes.Exp
in
( Less ((d__1__), (d__3__), (d__2__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 28, file Parser.grm, line 97 *)
val _ = update_ yyact 28
(fn () => repr(let
val d__1__ = peekVal 5 : (int*int)
val d__2__ = peekVal 4 : Fasto.UnknownTypes.Exp
val d__3__ = peekVal 3 : (int*int)
val d__4__ = peekVal 2 : Fasto.UnknownTypes.Exp
val d__5__ = peekVal 1 : (int*int)
val d__6__ = peekVal 0 : Fasto.UnknownTypes.Exp
in
( If ((d__2__), (d__4__), (d__6__), (d__1__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 29, file Parser.grm, line 99 *)
val _ = update_ yyact 29
(fn () => repr(let
val d__1__ = peekVal 3 : string*(int*int)
val d__2__ = peekVal 2 : (int*int)
val d__3__ = peekVal 1 : Fasto.UnknownTypes.Exp list
val d__4__ = peekVal 0 : (int*int)
in
( Apply (#1 (d__1__), (d__3__), #2 (d__1__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 30, file Parser.grm, line 101 *)
val _ = update_ yyact 30
(fn () => repr(let
val d__1__ = peekVal 2 : string*(int*int)
val d__2__ = peekVal 1 : (int*int)
val d__3__ = peekVal 0 : (int*int)
in
( Apply (#1 (d__1__), [], #2 (d__1__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 31, file Parser.grm, line 104 *)
val _ = update_ yyact 31
(fn () => repr(let
val d__1__ = peekVal 3 : (int*int)
val d__2__ = peekVal 2 : (int*int)
val d__3__ = peekVal 1 : Fasto.Type
val d__4__ = peekVal 0 : (int*int)
in
( Read ((d__3__), (d__1__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 32, file Parser.grm, line 106 *)
val _ = update_ yyact 32
(fn () => repr(let
val d__1__ = peekVal 3 : (int*int)
val d__2__ = peekVal 2 : (int*int)
val d__3__ = peekVal 1 : Fasto.UnknownTypes.Exp
val d__4__ = peekVal 0 : (int*int)
in
( Write ((d__3__), (), (d__1__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 33, file Parser.grm, line 108 *)
val _ = update_ yyact 33
(fn () => repr(let
val d__1__ = peekVal 3 : (int*int)
val d__2__ = peekVal 2 : (int*int)
val d__3__ = peekVal 1 : Fasto.UnknownTypes.Exp
val d__4__ = peekVal 0 : (int*int)
in
( Iota ((d__3__), (d__1__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 34, file Parser.grm, line 110 *)
val _ = update_ yyact 34
(fn () => repr(let
val d__1__ = peekVal 5 : (int*int)
val d__2__ = peekVal 4 : (int*int)
val d__3__ = peekVal 3 : Fasto.UnknownTypes.Exp
val d__4__ = peekVal 2 : (int*int)
val d__5__ = peekVal 1 : Fasto.UnknownTypes.Exp
val d__6__ = peekVal 0 : (int*int)
in
( Replicate ((d__3__), (d__5__), (), (d__1__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 35, file Parser.grm, line 112 *)
val _ = update_ yyact 35
(fn () => repr(let
val d__1__ = peekVal 7 : (int*int)
val d__2__ = peekVal 6 : (int*int)
val d__3__ = peekVal 5 : Fasto.UnknownTypes.FunArg
val d__4__ = peekVal 4 : (int*int)
val d__5__ = peekVal 3 : Fasto.UnknownTypes.Exp
val d__6__ = peekVal 2 : (int*int)
val d__7__ = peekVal 1 : Fasto.UnknownTypes.Exp
val d__8__ = peekVal 0 : (int*int)
in
( Reduce ((d__3__), (d__5__), (d__7__), (), (d__1__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 36, file Parser.grm, line 114 *)
val _ = update_ yyact 36
(fn () => repr(let
val d__1__ = peekVal 5 : (int*int)
val d__2__ = peekVal 4 : (int*int)
val d__3__ = peekVal 3 : Fasto.UnknownTypes.FunArg
val d__4__ = peekVal 2 : (int*int)
val d__5__ = peekVal 1 : Fasto.UnknownTypes.Exp
val d__6__ = peekVal 0 : (int*int)
in
( Map ((d__3__), (d__5__), (), (), (d__1__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 37, file Parser.grm, line 116 *)
val _ = update_ yyact 37
(fn () => repr(let
val d__1__ = peekVal 8 : (int*int)
val d__2__ = peekVal 7 : (int*int)
val d__3__ = peekVal 6 : (int*int)
val d__4__ = peekVal 5 : Fasto.UnknownTypes.FunArg
val d__5__ = peekVal 4 : (int*int)
val d__6__ = peekVal 3 : Fasto.UnknownTypes.Exp
val d__7__ = peekVal 2 : (int*int)
val d__8__ = peekVal 1 : Fasto.UnknownTypes.Exp
val d__9__ = peekVal 0 : (int*int)
in
( Reduce ((d__4__), (d__6__), (d__8__), (), (d__1__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 38, file Parser.grm, line 118 *)
val _ = update_ yyact 38
(fn () => repr(let
val d__1__ = peekVal 7 : (int*int)
val d__2__ = peekVal 6 : (int*int)
val d__3__ = peekVal 5 : Fasto.UnknownTypes.FunArg
val d__4__ = peekVal 4 : (int*int)
val d__5__ = peekVal 3 : Fasto.UnknownTypes.Exp
val d__6__ = peekVal 2 : (int*int)
val d__7__ = peekVal 1 : Fasto.UnknownTypes.Exp
val d__8__ = peekVal 0 : (int*int)
in
( Scan ((d__3__), (d__5__), (d__7__), (), (d__1__))) end : Fasto.UnknownTypes.Exp))
;
(* Rule 39, file Parser.grm, line 120 *)
val _ = update_ yyact 39
(fn () => repr(let
val d__1__ = peekVal 5 : (int*int)
val d__2__ = peekVal 4 : (int*int)
val d__3__ = peekVal 3 : Fasto.UnknownTypes.FunArg
val d__4__ = peekVal 2 : (int*int)
val d__5__ = peekVal 1 : Fasto.UnknownTypes.Exp
val d__6__ = peekVal 0 : (int*int)
in
( Filter ((d__3__), (d__5__), (), (d__1__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 40, file Parser.grm, line 121 *)
val _ = update_ yyact 40
(fn () => repr(let
val d__1__ = peekVal 2 : (int*int)
val d__2__ = peekVal 1 : Fasto.UnknownTypes.Exp
val d__3__ = peekVal 0 : (int*int)
in
( (d__2__) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 41, file Parser.grm, line 123 *)
val _ = update_ yyact 41
(fn () => repr(let
val d__1__ = peekVal 5 : (int*int)
val d__2__ = peekVal 4 : string*(int*int)
val d__3__ = peekVal 3 : (int*int)
val d__4__ = peekVal 2 : Fasto.UnknownTypes.Exp
val d__5__ = peekVal 1 : (int*int)
val d__6__ = peekVal 0 : Fasto.UnknownTypes.Exp
in
( Let (Dec (#1 (d__2__), (d__4__), (d__3__)), (d__6__), (d__1__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 42, file Parser.grm, line 125 *)
val _ = update_ yyact 42
(fn () => repr(let
val d__1__ = peekVal 3 : string*(int*int)
val d__2__ = peekVal 2 : (int*int)
val d__3__ = peekVal 1 : Fasto.UnknownTypes.Exp
val d__4__ = peekVal 0 : (int*int)
in
( Index (#1 (d__1__), (d__3__), (), (d__2__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 43, file Parser.grm, line 126 *)
val _ = update_ yyact 43
(fn () => repr(let
val d__1__ = peekVal 1 : (int*int)
val d__2__ = peekVal 0 : Fasto.UnknownTypes.Exp
in
( Not ( (d__2__), (d__1__) ) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 44, file Parser.grm, line 129 *)
val _ = update_ yyact 44
(fn () => repr(let
val d__1__ = peekVal 2 : Fasto.UnknownTypes.Exp
val d__2__ = peekVal 1 : (int*int)
val d__3__ = peekVal 0 : Fasto.UnknownTypes.Exp list
in
( (d__1__) :: (d__3__) ) end : Fasto.UnknownTypes.Exp list))
;
(* Rule 45, file Parser.grm, line 130 *)
val _ = update_ yyact 45
(fn () => repr(let
val d__1__ = peekVal 0 : Fasto.UnknownTypes.Exp
in
( (d__1__) :: [] ) end : Fasto.UnknownTypes.Exp list))
;
(* Rule 46, file Parser.grm, line 133 *)
val _ = update_ yyact 46
(fn () => repr(let
val d__1__ = peekVal 0 : string*(int*int)
in
( FunName (#1 (d__1__)) ) end : Fasto.UnknownTypes.FunArg))
;
(* Rule 47, file Parser.grm, line 135 *)
val _ = update_ yyact 47
(fn () => repr(let
val d__1__ = peekVal 6 : (int*int)
val d__2__ = peekVal 5 : Fasto.Type
val d__3__ = peekVal 4 : (int*int)
val d__4__ = peekVal 3 : Fasto.Param list
val d__5__ = peekVal 2 : (int*int)
val d__6__ = peekVal 1 : (int*int)
val d__7__ = peekVal 0 : Fasto.UnknownTypes.Exp
in
( Lambda ( (d__2__), (d__4__), (d__7__), (d__1__) ) ) end : Fasto.UnknownTypes.FunArg))
;
(* Rule 48, file Parser.grm, line 137 *)
val _ = update_ yyact 48
(fn () => repr(let
val d__1__ = peekVal 5 : (int*int)
val d__2__ = peekVal 4 : Fasto.Type
val d__3__ = peekVal 3 : (int*int)
val d__4__ = peekVal 2 : (int*int)
val d__5__ = peekVal 1 : (int*int)
val d__6__ = peekVal 0 : Fasto.UnknownTypes.Exp
in
( Lambda ( (d__2__), [], (d__6__), (d__1__) ) ) end : Fasto.UnknownTypes.FunArg))
;
(* Entry Prog *)
val _ = update_ yyact 49 (fn () => raise yyexit (peekVal 0));
val yytables : parseTables =
  ( yyact,
    yytransl,
    yylhs,
    yylen,
    yydefred,
    yydgoto,
    yysindex,
    yyrindex,
    yygindex,
    YYTABLESIZE,
    yytable,
    yycheck );
fun Prog lexer lexbuf = yyparse yytables 1 lexer lexbuf;
