%{

open FEIEF;

%}

%token OR AND IMP NOT FORALL EXIST DOT LPAR RPAR TRUE FALSE EOF
%token <string> VAR 

%nonassoc ifprec
%nonassoc EXIST FORALL
%right IMP
%left OR AND
%nonassoc NOT

%start Prog

%type <FEIEF.Expr> Prog
%type <FEIEF.Expr> Expr

%%

Prog : Expr EOF { $1 }
;

Expr : Expr OR Expr 					{ Or( $1, $3 ) }
    | Expr AND Expr 					{ And( $1, $3 ) }
    | Expr IMP Expr 					{ Implies( $1, $3 ) }
    | NOT Expr 							{ Not( $2 ) }
    | FORALL VAR DOT Expr %prec ifprec 	{ Forall( $2, $4 ) }
    | EXIST VAR DOT Expr %prec ifprec 	{ Exists( $2, $4 ) }
    | LPAR Expr RPAR 					{ $2 }
    | VAR 								{ Var( $1 ) }
    | FALSE 							{ False }
    | TRUE 								{ True }
;

%%
