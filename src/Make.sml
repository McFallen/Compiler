(* A cross-platform FEIEF compiler compiler. *)

(*

Get going on *nix by typing the following at the command line:

$ mosmlc -o make Make.sml
$ ./make help

Get going on Windows by typing the following at the command line:

$ mosmlc -o make.exe Make.sml
$ .\make.exe help

*)

structure Make = struct

  fun isBadOS () = Path.getVolume "C:" = "C:"

  local
    val wd = FileSys.getDir ()
    val absPath = Path.concat (Path.getParent wd, "bin")
  in
    val BIN_DIR = Path.mkRelative { path = absPath, relativeTo = wd }
  end

  local
    val binName = if isBadOS () then "feief.exe" else "feief"
  in
    val FEIEF_BIN = Path.concat (BIN_DIR, binName)
  end

  fun rmIfExists filename =
    FileSys.remove filename handle
      (e as SysErr(m, _)) =>
        if String.isSuffix "No such file or directory" m
        then () else raise e

  fun filesWithExt ext =
    let
      val dstr = FileSys.openDir "."
      fun loop () =
        case FileSys.readDir dstr of
            SOME s => if Path.ext s = SOME ext
                      then s :: (loop ())
                      else loop ()
          | NONE => (FileSys.closeDir dstr ; [])
    in
      loop ()
    end

  fun rmAllWithExt ext =
    map rmIfExists (filesWithExt ext)

  fun printLn s =
    ( TextIO.output (TextIO.stdOut, s ^ "\n") ; TextIO.flushOut TextIO.stdOut )

  fun clean () =
    ( printLn ("Deleting *.ui *.uo Parser.sig Parser.sml Parser.output Lexer.sml \"" ^ FEIEF_BIN ^ "\"")
    ; rmAllWithExt "ui"
    ; rmAllWithExt "uo"
    ; rmIfExists "Parser.sig"
    ; rmIfExists "Parser.sml"
    ; rmIfExists "Parser.output"
    ; rmIfExists "Lexer.sml"
    ; rmIfExists FEIEF_BIN
    ; true
    )

  fun exec (cmd, retval) = if (not retval) then retval
      else ( printLn cmd ; Process.isSuccess (Process.system cmd) )

  fun compile () = foldl exec true
    [ "mosmlc -c -liberal FEIEF.sml"

    , "mosmlyac Parser.grm"
    , "mosmlc -liberal Parser.sig"
    , "mosmlc -c Parser.sml"

    , "mosmllex Lexer.lex"
    , "mosmlc -c Lexer.sml"

    , "mosmlc -o feief FEIEFC.sml"
    ]

  fun moveBin () =
    ( printLn ("Moving FEIEFC to \"" ^ FEIEF_BIN ^ "\"...")
    ; FileSys.mkDir BIN_DIR handle SysErr _ => ()
    ; FileSys.rename { old = "feief", new = FEIEF_BIN }
    ; true
    )

  fun all () =
    clean () andalso compile () andalso moveBin ()

  fun execRule rule = ( rule () ; () )

  val usage = String.concatWith "\n"
    [ "A cross-platform Fasto compiler compiler."
    , ""
    , "By default, all autogenerated files are deleted, the entire"
    , "compiler is compiled, generating an executable feief. The"
    , "executable is then moved to the sibling bin directory, and"
    , "renamed to either fasto or fasto.exe, depending on whether"
    , "you are running *nix or Windows."
    , ""
    , "You can change the default behaviour by passing an option:"
    , ""
    , "  clean    Delete the autogenerated files only."
    , "  help     Print this message, and halt."
    ] ^ "\n"

  fun showUsage str = ( TextIO.output (str, usage) ; TextIO.flushOut str )

  val _ =
    case Mosml.argv () of
        [_, "clean"] => execRule clean
      | [_, "help"] => showUsage TextIO.stdOut
      | [_] => execRule all
      | _ => showUsage TextIO.stdErr
end
